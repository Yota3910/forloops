reduced_model_error_VS <- mean(valid_pred_class_reduced != valid_data$default)
print(full_model_error_VS)
print(reduced_model_error_VS)
print(full_model_error_k_100)
print(reduced_model_error_k_100)print(full_model_error_k_10)
#| cache: true
set.seed(123)
full_model_errors <- rep(NA, nrow(Default))
reduced_model_errors <- rep(NA, nrow(Default))
for (i in 1:nrow(Default)) {
train_data <- Default[-i, ]
valid_pred <- predict(full_model, newdata = Default[i, ], type = "response")
full_model_errors[i] <- ifelse(valid_pred > 0.5, "Yes", "No") != Default[i, "default"]
valid_pred_reduced <- predict(reduced_model, newdata = Default[i, ], type = "response")
reduced_model_errors[i] <- ifelse(valid_pred_reduced > 0.5, "Yes", "No") != Default[i, "default"]
}
full_model_error_LOOCV <- mean(full_model_errors)
reduced_model_error_LOOCV <- mean(reduced_model_errors)
print(full_model_error_LOOCV)
print(reduced_model_error_LOOCV)
#| cache: true
set.seed(123)
K <- 10
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
# Create training and validation sets for fold i
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
valid_pred <- predict(full_model, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
valid_pred_reduced <- predict(reduced_model, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_10 <- mean(full_model_errors)
reduced_model_error_k_10 <- mean(reduced_model_errors)
print(full_model_error_k_10)
print(reduced_model_error_k_10)
#| cache: true
set.seed(123)
K <- 100
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
valid_pred <- predict(full_model, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
valid_pred_reduced <- predict(reduced_model, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_100 <- mean(full_model_errors)
reduced_model_error_k_100 <- mean(reduced_model_errors)
print(full_model_error_k_100)
print(reduced_model_error_k_100)
print(full_model_error_VS)
print(reduced_model_error_VS)
print(full_model_error_k_100)
print(reduced_model_error_k_100)
print(full_model_error_k_10)
print(reduced_model_error_k_10)
anova_results <- anova(full_model_VS, reduced_model_VS, test = "Chisq")
set.seed(123)
Z <- sample(nrow(Default), 0.6 * nrow(Default))
train_data <- Default[Z, ]
valid_data <- Default[-Z, ]
valid_pred_full <- predict(full_model, newdata = valid_data, type = "response")
full_model <- glm(default ~ income + balance + student, data = Default, family = "binomial")
pred_class <- ifelse(valid_pred_full > 0.5, "Yes", "No")
full_model_error_VS <- mean(pred_class != valid_data$default)
valid_pred_reduced <- predict(reduced_model, newdata = valid_data, type = "response")
valid_pred_class_reduced <- ifelse(valid_pred_reduced > 0.5, "Yes", "No")
reduced_model_error_VS <- mean(valid_pred_class_reduced != valid_data$default)
print(full_model_error_VS)
print(reduced_model_error_VS)
set.seed(123)
Z <- sample(nrow(Default), 0.6 * nrow(Default))
train_data <- Default[Z, ]
valid_data <- Default[-Z, ]
valid_pred_full <- predict(full_model_VS, newdata = valid_data, type = "response")
set.seed(123)
Z <- sample(nrow(Default), 0.6 * nrow(Default))
train_data <- Default[Z, ]
valid_data <- Default[-Z, ]
full_model_VS <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred_full <- predict(full_model_VS, newdata = valid_data, type = "response")
pred_class <- ifelse(valid_pred_full > 0.5, "Yes", "No")
full_model_error_VS <- mean(pred_class != valid_data$default)
reduced_model_VS <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model, newdata = valid_data, type = "response")
valid_pred_class_reduced <- ifelse(valid_pred_reduced > 0.5, "Yes", "No")
reduced_model_error_VS <- mean(valid_pred_class_reduced != valid_data$default)
print(full_model_error_VS)
print(reduced_model_error_VS)
#| cache: true
set.seed(123)
full_model_errors <- rep(NA, nrow(Default))
reduced_model_errors <- rep(NA, nrow(Default))
for (i in 1:nrow(Default)) {
train_data <- Default[-i, ]
valid_pred <- predict(full_model, newdata = Default[i, ], type = "response")
full_model <- glm(default ~ income + balance + student, data = Default, family = "binomial")
full_model_errors[i] <- ifelse(valid_pred > 0.5, "Yes", "No") != Default[i, "default"]
reduced_model <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model, newdata = Default[i, ], type = "response")
reduced_model_errors[i] <- ifelse(valid_pred_reduced > 0.5, "Yes", "No") != Default[i, "default"]
}
anova_results <- anova(full_model_VS, reduced_model_VS, test = "Chisq")
print(anova_results)
anova_results <- anova(full_model_VS, reduced_model_VS)
print(anova_results)
anova_results <- anova(full_model_VS, reduced_model_VS, test = "Chisq")
print(anova_results)
#| cache: true
set.seed(123)
full_model_errors <- rep(NA, nrow(Default))
reduced_model_errors <- rep(NA, nrow(Default))
for (i in 1:nrow(Default)) {
train_data <- Default[-i, ]
full_model_LOOCV <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model, newdata = Default[i, ], type = "response")
full_model_errors[i] <- ifelse(valid_pred > 0.5, "Yes", "No") != Default[i, "default"]
reduced_model_LOOCV <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_LOOCV, newdata = Default[i, ], type = "response")
reduced_model_errors[i] <- ifelse(valid_pred_reduced > 0.5, "Yes", "No") != Default[i, "default"]
}
#| cache: true
set.seed(123)
K <- 10
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
# Create training and validation sets for fold i
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
full_model_k_10 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model_k_10, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
reduced_model_l_10 <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_10 <- mean(full_model_errors)
reduced_model_error_k_10 <- mean(reduced_model_errors)
print(full_model_error_k_10)
print(reduced_model_error_k_10)
#| cache: true
set.seed(123)
K <- 100
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
full_model_k_100 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model_k_100, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
reduced_model_k_100 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_k_100, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_100 <- mean(full_model_errors)
reduced_model_error_k_100 <- mean(reduced_model_errors)
print(full_model_error_k_100)
print(reduced_model_error_k_100)
anova_results_VS <- anova(full_model_VS, reduced_model_VS, test = "Chisq")
print(anova_results)
anova_results_k_10 <- anova(full_model_k_10, reduced_model_k_10, test = "Chisq")
#| cache: true
set.seed(123)
K <- 10
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
# Create training and validation sets for fold i
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
full_model_k_10 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model_k_10, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
reduced_model_k_10 <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_k_10, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_10 <- mean(full_model_errors)
reduced_model_error_k_10 <- mean(reduced_model_errors)
print(full_model_error_k_10)
print(reduced_model_error_k_10)
#| cache: true
set.seed(123)
K <- 100
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
full_model_k_100 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model_k_100, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
reduced_model_k_100 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_k_100, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_100 <- mean(full_model_errors)
reduced_model_error_k_100 <- mean(reduced_model_errors)
print(full_model_error_k_100)
print(reduced_model_error_k_100)
anova_results_VS <- anova(full_model_VS, reduced_model_VS, test = "Chisq")
print(anova_results)
anova_results_k_10 <- anova(full_model_k_10, reduced_model_k_10, test = "Chisq")
print(anova_results)
anova_results_VS_k_100 <- anova(full_model_k_100, reduced_model_k_100 , test = "Chisq")
print(anova_results)
anova_results_VS <- anova(full_model_VS, reduced_model_VS, test = "Chisq")
print(anova_results_VS)
anova_results_k_10 <- anova(full_model_k_10, reduced_model_k_10, test = "Chisq")
print(anova_results_k_10)
anova_results_k_100 <- anova(full_model_k_100, reduced_model_k_100 , test = "Chisq")
print(anova_results_k_100)
#| cache: true
set.seed(123)
K <- 100
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
full_model_k_100 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model_k_100, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
reduced_model_k_100 <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_k_100, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_100 <- mean(full_model_errors)
reduced_model_error_k_100 <- mean(reduced_model_errors)
print(full_model_error_k_100)
print(reduced_model_error_k_100)
print(full_model_error_VS)
print(reduced_model_error_VS)
print(full_model_error_k_100)
print(reduced_model_error_k_100)
print(full_model_error_k_10)
print(reduced_model_error_k_10)
anova_results_VS <- anova(full_model_VS, reduced_model_VS, test = "Chisq")
print(anova_results_VS)
anova_results_k_10 <- anova(full_model_k_10, reduced_model_k_10, test = "Chisq")
print(anova_results_k_10)
anova_results_k_100 <- anova(full_model_k_100, reduced_model_k_100 , test = "Chisq")
print(anova_results_k_100)
#| label: cv-sim-make-data
#| echo: fenced
#| include: true
#| message: false
library(tidyverse)
set.seed(14)
x <- rnorm(100)
y <- x - 4*x^2 + rnorm(100)
my_data <- data.frame(x,y)
ggplot(my_data, aes(x,y)) +
geom_point() +
theme_minimal()
#| echo: fenced
#| include: true
my_df <- data.frame(
x =  x,
x2 = x^2,
x3 = x^3,
x4 = x^4,
y = y
)
LOOCV <- function(model, data) {
n <- nrow(data)
preds <- rep(NA, n)
for (i in 1:n) {
model_i <- lm(model, data = data[-i, ])
preds[i] <- predict(model_i, newdata = data[i, ])
}
sum((data$y - preds)^2) / n
}
model1 <- "y ~ x"
model2 <- "y ~ x + x2"
model3 <- "y ~ x + x2 + x3"
model4 <- "y ~ x + x2 + x3 + x4"
LOOCV_results <- c(
LOOCV(model1, my_df),
LOOCV(model2, my_df),
LOOCV(model3, my_df),
LOOCV(model4, my_df)
)
adjusted_LOOCV <- LOOCV_results / (1 - (1 /  nrow(my_df)))
print(adjusted_LOOCV)
model_lm1 <- lm(model1, data = my_df)
model_lm2 <- lm(model2, data = my_df)
model_lm3 <- lm(model3, data = my_df)
model_lm4 <- lm(model4, data = my_df)
anova_results <- anova(model_lm1, model_lm2, model_lm3, model_lm4, test = "F")
print(anova_results)
set.seed(14)
KFold_CV <- function(model, data, K) {
n <- nrow(data)
fold_size <- floor(n / K)
mse <- numeric(K)
for (i in 1:K) {
index <- ((i - 1) * fold_size + 1):min(i * fold_size, n)
data_train <- data[-index, ]
data_test <- data[index, ]
model_i <- lm(model, data = data_train)
preds <- predict(model_i, newdata = data_test)
mse[i] <- mean((data_test$y - preds)^2)
}
mean(mse)
}
K <- 10
KFold_CV_results <- c(
KFold_CV(model1, my_df, K),
KFold_CV(model2, my_df, K),
KFold_CV(model3, my_df, K),
KFold_CV(model4, my_df, K)
)
print(adjusted_LOOCV)
print(KFold_CV_results)
#| label: Default-set-up
#| message: false
#| echo: fenced
#| include: true
library(tidyverse)
library(ISLR2)
data("Default")
full_model <- glm(default ~ income + balance + student, data = Default, family = "binomial")
# Reduced Model without student predictor
reduced_model <- glm(default ~ income + balance, data = Default, family = "binomial")
set.seed(123)
Z <- sample(nrow(Default), 0.6 * nrow(Default))
train_data <- Default[Z, ]
valid_data <- Default[-Z, ]
full_model_VS <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred_full <- predict(full_model_VS, newdata = valid_data, type = "response")
pred_class <- ifelse(valid_pred_full > 0.5, "Yes", "No")
full_model_error_VS <- mean(pred_class != valid_data$default)
reduced_model_VS <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model, newdata = valid_data, type = "response")
valid_pred_class_reduced <- ifelse(valid_pred_reduced > 0.5, "Yes", "No")
reduced_model_error_VS <- mean(valid_pred_class_reduced != valid_data$default)
print(full_model_error_VS)
print(reduced_model_error_VS)
#| cache: true
set.seed(123)
full_model_errors <- rep(NA, nrow(Default))
reduced_model_errors <- rep(NA, nrow(Default))
for (i in 1:nrow(Default)) {
train_data <- Default[-i, ]
full_model_LOOCV <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model, newdata = Default[i, ], type = "response")
full_model_errors[i] <- ifelse(valid_pred > 0.5, "Yes", "No") != Default[i, "default"]
reduced_model_LOOCV <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_LOOCV, newdata = Default[i, ], type = "response")
reduced_model_errors[i] <- ifelse(valid_pred_reduced > 0.5, "Yes", "No") != Default[i, "default"]
}
#| cache: true
set.seed(123)
K <- 10
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
# Create training and validation sets for fold i
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
full_model_k_10 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model_k_10, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
reduced_model_k_10 <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_k_10, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_10 <- mean(full_model_errors)
reduced_model_error_k_10 <- mean(reduced_model_errors)
print(full_model_error_k_10)
print(reduced_model_error_k_10)
#| cache: true
set.seed(123)
K <- 100
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
full_model_k_100 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model_k_100, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
reduced_model_k_100 <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_k_100, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_100 <- mean(full_model_errors)
reduced_model_error_k_100 <- mean(reduced_model_errors)
print(full_model_error_k_100)
print(reduced_model_error_k_100)
#| cache: true
set.seed(123)
full_model_errors <- rep(NA, nrow(Default))
reduced_model_errors <- rep(NA, nrow(Default))
for (i in 1:nrow(Default)) {
train_data <- Default[-i, ]
full_model_LOOCV <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model, newdata = Default[i, ], type = "response")
full_model_errors[i] <- ifelse(valid_pred > 0.5, "Yes", "No") != Default[i, "default"]
reduced_model_LOOCV <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_LOOCV, newdata = Default[i, ], type = "response")
reduced_model_errors[i] <- ifelse(valid_pred_reduced > 0.5, "Yes", "No") != Default[i, "default"]
}
#| cache: true
set.seed(123)
# Assuming Default is your dataset
full_model_errors <- rep(NA, nrow(Default))
reduced_model_errors <- rep(NA, nrow(Default))
for (i in 1:nrow(Default)) {
train_data <- Default[-i, ]
full_model_LOOCV <- glm(default ~ income + balance + student, data = train_data, family = "binomial")
valid_pred <- predict(full_model_LOOCV, newdata = Default[i, ], type = "response")
full_model_errors[i] <- ifelse(valid_pred > 0.5, "Yes", "No") != Default[i, "default"]
reduced_model_LOOCV <- glm(default ~ income + balance, data = train_data, family = "binomial")
valid_pred_reduced <- predict(reduced_model_LOOCV, newdata = Default[i, ], type = "response")
reduced_model_errors[i] <- ifelse(valid_pred_reduced > 0.5, "Yes", "No") != Default[i, "default"]
}
#| cache: true
library(caret)
set.seed(123)
K <- 10
full_model_errors <- rep(NA, K)
reduced_model_errors <- rep(NA, K)
folds <- createFolds(Default$default, k = K, list = TRUE)
for (i in 1:K) {
# Create training and validation sets for fold i
train_indices <- unlist(folds[-i])
train_data <- Default[train_indices, ]
valid_data <- Default[folds[[i]], ]
full_model_k_10 <- glm(default ~ income + balance + student, data = Default, family = "binomial")
valid_pred <- predict(full_model_k_10, newdata = valid_data, type = "response")
full_model_errors[i] <- mean(ifelse(valid_pred > 0.5, "Yes", "No") != valid_data$default)
reduced_model_k_10 <- glm(default ~ income + balance, data = Default, family = "binomial")
valid_pred_reduced <- predict(reduced_model_k_10, newdata = valid_data, type = "response")
reduced_model_errors[i] <- mean(ifelse(valid_pred_reduced > 0.5, "Yes", "No") != valid_data$default)
}
full_model_error_k_10 <- mean(full_model_errors)
reduced_model_error_k_10 <- mean(reduced_model_errors)
print(full_model_error_k_10)
print(reduced_model_error_k_10)
setwd("/Users/yotasugai/forloop")
usethis::create_package(path = "forloop", rstudio = FALSE, open = FALSE)
?col_means
library(usethis)
library(devtools)
devtools::load_all()
usethis::create_package(path = "forloop", rstudio = FALSE, open = FALSE)
for (val in vec) {
if (is.na(val)) {
na_count <- na_count + 1
}
}
)
)
library(usethis)
library(devtools)
devtools::document()
usethis::use_export("col_means")
usethis::use_export("count_na")
devtools::check()
usethis::create_package(path = "yotasugai/abc", rstudio = FALSE, open = FALSE)
usethis::create_package(path = "/Users/yotasugai/abc, rstudio = FALSE, open = FALSE)
library(usethis)
library(devtools)
devtools::load_all()
usethis::create_package(path = "/Users/yotasugai/abc", rstudio = FALSE, open = FALSE)
library(usethis)
library(devtools)
devtools::load_all()
devtools::document()
usethis::use_export("col_means")
devtools::document()
usethis::create_package(path = "/Users/yotasugai/abc", rstudio = FALSE, open = FALSE)
usethis::create_package(path = "/Users/yotasugai/abc", rstudio = FALSE, open = FALSE,override = TRUE)
usethis::create_package(path = "/Users/yotasugai/abc", rstudio = FALSE, open = FALSE)
usethis::create_package(path = "/Users/yotasugai/abc", rstudio = FALSE, open = FALSE, override = TRUE)
usethis::create_package(path = "/Users/yotasugai/abc", rstudio = FALSE, open = FALSE)
devtools::load_all()
usethis::create_package(path = "forloop", rstudio = FALSE, open = FALSE)
devtools::load_all()
devtools::document()
devtools::install()
devtools::install()
library(forloop)
?col_means
?count_na
